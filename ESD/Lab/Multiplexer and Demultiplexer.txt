-----------------------------------------------------------------------------------------
// Multiplexer Implementation (4-to-1)


module mux (
    input s1,s2,a,b,c,d,
    output y
);

assign y = (~s1 & ~s2 & a) | (~s1 & s2 & b) | (s1 & ~s2 & c) | (s1 & s2 & d);
endmodule

module test_mux;
reg a,b,c,d,s1,s2;
wire y;
mux obj(s1,s2,a,b,c,d,y);

initial begin
    $monitor("S1=%b S2=%b A=%b B=%b C=%b D=%b | Y=%b", s1,s2,a,b,c,d,y);
    a=0; b=0; c=0; d=0; s1=0; s2=0;
		#5  a=0; b=0; c=0; d=0; s1=0; s2=0;
		#5  a=0; b=0; c=0; d=1; s1=0; s2=1;
		#5  a=0; b=0; c=1; d=0; s1=1; s2=0;
		#5  a=0; b=0; c=1; d=1; s1=1; s2=1;
		#5  a=0; b=1; c=0; d=0; s1=0; s2=0;
		#5  a=0; b=1; c=0; d=1; s1=0; s2=1;
		#5  a=0; b=1; c=1; d=0; s1=1; s2=0;
		#5  a=0; b=1; c=1; d=1; s1=1; s2=0;
		#5  a=1; b=0; c=0; d=0; s1=0; s2=1;
		#5  a=1; b=0; c=0; d=1; s1=0; s2=0;

end
endmodule

-----------------------------------------------------------------------------------------
// Demultiplexer Implementation (2-to-4)


module demux (
    input s1,s0,e,i,
    output a,b,c,d
);
assign a = i & e & ~s1 & ~s0;
assign b = i & e & ~s1 & s0;
assign c = i & e & s1 & ~s0;
assign d = i & e & s1 & s0;
endmodule

module test_demux;
reg s1,s0,e,i;
wire a,b,c,d;

demux obj(s1,s0,e,i,a,b,c,d);

initial begin
    $monitor("E=%b S1=%b S0=%b | A=%b B=%b C=%b D=%b", e,s1,s0,a,b,c,d);
    i=1; e=0; s1=0; s0=0;
		#10  i=1; e=1; s1=0; s0=0;
		#10  i=1; e=1; s1=0; s0=1;
		#10  i=1; e=1; s1=1; s0=0;
		#10  i=1; e=1; s1=1; s0=1;
endÂ 
endmodule